name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get version tag from PR
        id: get_tag
        run: |
          PR_NUMBER=$(git log -1 --pretty=%B | grep -oP '#\K\d+')
          if [ -z "$PR_NUMBER" ]; then
            echo "No PR number found in commit message"
            exit 1
          fi
          
          LABELS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/labels" | \
            jq -r '.[].name')
          
          VERSION_TAGS=("major-version" "minor-version" "bug-fix")
          MATCHING_TAG=$(echo "$LABELS" | grep -E "$(IFS=\|; echo "${VERSION_TAGS[*]}")")
          
          echo "::set-output name=version_tag::$MATCHING_TAG"

      - name: Update version
        id: update_version
        run: |
          current_version="${{ vars.CURRENT_VERSION }}"
          version_tag="${{ steps.get_tag.outputs.version_tag }}"
          
          IFS='.' read -ra VERSION_PARTS <<< "${current_version#v}"
          major=${VERSION_PARTS[0]}
          minor=${VERSION_PARTS[1]}
          patch=${VERSION_PARTS[2]}
          
          case "$version_tag" in
            "major-version")
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            "minor-version")
              minor=$((minor + 1))
              patch=0
              ;;
            "bug-fix")
              patch=$((patch + 1))
              ;;
          esac
          
          new_version="v${major}.${minor}.${patch}"
          echo "::set-output name=new_version::${new_version}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.update_version.outputs.new_version }}
          release_name: Release ${{ steps.update_version.outputs.new_version }}
          body: |
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

      - name: Update CURRENT_VERSION
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.actions.createOrUpdateRepoVariable({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'CURRENT_VERSION',
              value: '${{ steps.update_version.outputs.new_version }}'
            })
